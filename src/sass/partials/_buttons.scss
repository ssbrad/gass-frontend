//|------------------------------------------------------------------------------------------------------------------------------
//| VARIABLES
//|------------------------------------------------------------------------------------------------------------------------------

$include-html-button-classes: $include-html-classes;

// We use these to build padding for buttons.
$button-med: em-calc(12);
$button-tny: em-calc(7);
$button-sml: em-calc(9);
$button-lrg: em-calc(16);

// We use this to control the display property.
$button-display: inline-block;
$button-margin-bottom: em-calc(20);

// We use these to control button text styles.
$button-font-family: inherit;
$button-font-color: #fff;
$button-font-color-alt: #333;
$button-font-med: em-calc(16);
$button-font-tny: em-calc(11);
$button-font-sml: em-calc(13);
$button-font-lrg: em-calc(20);
$button-font-weight: bold;
$button-font-align: center;

// We use these to control various hover effects.
$button-function-factor: 10%;

// We use these to control button border styles.
$button-border-width: 1px;
$button-border-style: solid;

// We use this to set the default radius used throughout the core.
$button-radius: $global-radius;
$button-round: $global-rounded;

// We use this to set default opacity for disabled buttons.
$button-disabled-opacity: 0.6;

//
// Button Group Variables
//
$include-html-button-classes: $include-html-classes;

// Sets the margin for the right side by default, and the left margin if right-to-left direction is used
$button-bar-margin-opposite: em-calc(10);


//
// Dropdown Button Variables
//
$include-html-button-classes: $include-html-classes;

// We use these to set the color of the pip in dropdown buttons
$dropdown-button-pip-color: #fff;
$dropdown-button-pip-color-alt: #333;

// We use these to style tiny dropdown buttons
$dropdown-button-padding-tny: $button-tny * 5;
$dropdown-button-pip-size-tny: $button-tny;
$dropdown-button-pip-opposite-tny: $button-tny * 2;
$dropdown-button-pip-top-tny: -$button-tny / 2 + em-calc(1);

// We use these to style small dropdown buttons
$dropdown-button-padding-sml: $button-sml * 5;
$dropdown-button-pip-size-sml: $button-sml;
$dropdown-button-pip-opposite-sml: $button-sml * 2;
$dropdown-button-pip-top-sml: -$button-sml / 2 + em-calc(1);

// We use these to style medium dropdown buttons
$dropdown-button-padding-med: $button-med * 4 + em-calc(3);
$dropdown-button-pip-size-med: $button-med - em-calc(3);
$dropdown-button-pip-opposite-med: $button-med * 2;
$dropdown-button-pip-top-med: -$button-med / 2 + em-calc(2);

// We use these to style large dropdown buttons
$dropdown-button-padding-lrg: $button-lrg * 4;
$dropdown-button-pip-size-lrg: $button-lrg - em-calc(6);
$dropdown-button-pip-opposite-lrg: $button-lrg + em-calc(12);
$dropdown-button-pip-top-lrg: -$button-lrg / 2 + em-calc(3);

//
// Split Button Variables
//
$include-html-button-classes: $include-html-classes;

// We use these to control different shared styles for Split Buttons
$split-button-function-factor: 15%;
$split-button-pip-color: #fff;
$split-button-pip-color-alt: #333;
$split-button-active-bg-tint: rgba(0,0,0,0.1);

// We use these to control tiny split buttons
$split-button-padding-tny: $button-tny * 9;
$split-button-span-width-tny: $button-tny * 6.5;
$split-button-pip-size-tny: $button-tny;
$split-button-pip-top-tny: $button-tny * 2;
$split-button-pip-default-float-tny: em-calc(-5);

// We use these to control small split buttons
$split-button-padding-sml: $button-sml * 7;
$split-button-span-width-sml: $button-sml * 5;
$split-button-pip-size-sml: $button-sml;
$split-button-pip-top-sml: $button-sml * 1.5;
$split-button-pip-default-float-sml: em-calc(-9);

// We use these to control medium split buttons
$split-button-padding-med: $button-med * 6.4;
$split-button-span-width-med: $button-med * 4;
$split-button-pip-size-med: $button-med - em-calc(3);
$split-button-pip-top-med: $button-med * 1.5;
$split-button-pip-default-float-med: em-calc(-9);

// We use these to control large split buttons
$split-button-padding-lrg: $button-lrg * 6;
$split-button-span-width-lrg: $button-lrg * 3.75;
$split-button-pip-size-lrg: $button-lrg - em-calc(6);
$split-button-pip-top-lrg: $button-lrg + em-calc(5);
$split-button-pip-default-float-lrg: em-calc(-9);




/*-------------------------------------------------------|  DO NO MOVE  |-------------------------------------------------------*/

@import "foundation/components/buttons";
@import "foundation/components/button-groups"; // *requires components/buttons
@import "foundation/components/dropdown-buttons"; // *requires components/buttons
@import "foundation/components/split-buttons"; // *requires components/buttons

/*-------------------------------------------------------|  DO NO MOVE  |-------------------------------------------------------*/




//|------------------------------------------------------------------------------------------------------------------------------
//| MIXINS
//|------------------------------------------------------------------------------------------------------------------------------


// // We use this mixin to create a default button base.
// @mixin button-base($style:true, $display:$button-display) {
//   @if $style {
//     border-style: $button-border-style;
//     border-width: $button-border-width;
//     cursor: $cursor-pointer-value;
//     font-family: $button-font-family;
//     font-weight: $button-font-weight;
//     line-height: normal;
//     margin: 0 0 $button-margin-bottom;
//     position: relative;
//     text-decoration: none;
//     text-align: $button-font-align;
//   }
//   @if $display { display: $display; }
// }

// // We use this mixin to add button size styles
// @mixin button-size($padding:$button-med, $full-width:false, $is-input:false) {

//   // We control which padding styles come through,
//   // these can be turned off by setting $padding:false
//   @if $padding {
//     padding-top: $padding;
//     padding-#{$opposite-direction}: $padding * 2;
//     padding-bottom: $padding + em-calc(1);
//     padding-#{$default-float}: $padding * 2;

//     // We control the font-size based on mixin input.
//     @if      $padding == $button-med { font-size: $button-font-med; }
//     @else if $padding == $button-tny { font-size: $button-font-tny; }
//     @else if $padding == $button-sml { font-size: $button-font-sml; }
//     @else if $padding == $button-lrg { font-size: $button-font-lrg; }
//     @else                            { font-size: $padding - em-calc(2); }
//   }

//   // We can set $full-width:true to remove side padding extend width.
//   @if $full-width {
//     // We still need to check if $padding is set.
//     @if $padding {
//     padding-top: $padding;
//     padding-bottom: $padding + em-calc(1);
//     } @else if $padding == false {
//       padding-top:0;
//       padding-bottom:0;
//     }
//     padding-right: 0;
//     padding-left: 0;
//     width: 100%;
//   }

//   // <input>'s and <button>'s take on strange padding. We added this to help fix that.
//   @if $is-input == $button-lrg {
//     padding-top: $is-input + em-calc(.5);
//     padding-bottom: $is-input + em-calc(.5);
//     -webkit-appearance: none;
//   }
//   @else if $is-input {
//     padding-top: $is-input + em-calc(1);
//     padding-bottom: $is-input;
//     -webkit-appearance: none;
//   }
// }

// // We use this mixin to add button color styles
// @mixin button-style($bg:$primary-color, $radius:false, $disabled:false) {

//   // We control which background styles are used,
//   // these can be removed by setting $bg:false
//   @if $bg {
//     // This find the lightness percentage of the background color.
//     $bg-lightness: lightness($bg);

//     background-color: $bg;
//     border-color: darken($bg, $button-function-factor);
//     &:hover,
//     &:focus { background-color: darken($bg, $button-function-factor); }

//     // We control the text color for you based on the background color.
//     @if $bg-lightness > 70% {
//       color: $button-font-color-alt;
//       &:hover,
//       &:focus { color: $button-font-color-alt; }
//     }
//     @else {
//       color: $button-font-color;
//       &:hover,
//       &:focus { color: $button-font-color; }
//     }
//   }

//   // We can set $disabled:true to create a disabled transparent button.
//   @if $disabled {
//     cursor: $cursor-default-value;
//     opacity: $button-disabled-opacity;
//     @if $experimental {
//       -webkit-box-shadow: none;
//     }
//     box-shadow: none;
//     &:hover,
//     &:focus { background-color: $bg; }
//   }

//   // We can control how much button radius us used.
//   @if $radius == true { @include radius($button-radius); }
//   @else if $radius { @include radius($radius); }

// }

// // We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
// @mixin button($padding:$button-med, $bg:$primary-color, $radius:false, $full-width:false, $disabled:false, $is-input:false, $is-prefix:false) {
//   @include button-base;
//   @include button-size($padding, $full-width, $is-input);
//   @include button-style($bg, $radius, $disabled);
// }


// //
// // Button Classes
// //

// // Only include these classes if the variable is true, otherwise they'll be left out.
// @if $include-html-button-classes != false {

//   // Default styles applied outside of media query
//   button, .button {
//     @include button-base;
//     @include button-size;
//     @include button-style;

//     &.secondary { @include button-style($bg:$secondary-color); }
//     &.success   { @include button-style($bg:$success-color); }
//     &.alert     { @include button-style($bg:$alert-color); }

//     &.large  { @include button-size($padding:$button-lrg); }
//     &.small  { @include button-size($padding:$button-sml); }
//     &.tiny   { @include button-size($padding:$button-tny); }
//     &.expand { @include button-size($padding:null,$full-width:true); }

//     &.left-align  { text-align: left; text-indent: em-calc(12); }
//     &.right-align { text-align: right; padding-right: em-calc(12); }

//     &.disabled, &[disabled] { @include button-style($bg:$primary-color, $disabled:true);
//       &.secondary { @include button-style($bg:$secondary-color, $disabled:true); }
//       &.success { @include button-style($bg:$success-color, $disabled:true); }
//       &.alert { @include button-style($bg:$alert-color, $disabled:true); }
//     }

//   }

//   button, .button {
//     @include button-size($padding:false, $is-input:$button-med);
//     &.tiny { @include button-size($padding:false, $is-input:$button-tny); }
//     &.small { @include button-size($padding:false, $is-input:$button-sml); }
//     &.large { @include button-size($padding:false, $is-input:$button-lrg); }
//   }

//   // Styles for any browser or device that support media queries
//   @media only screen {

//     button, .button {
//       @include inset-shadow();
//       @include single-transition(background-color);

//       &.large  { @include button-size($padding:false, $full-width:false); }
//       &.small  { @include button-size($padding:false, $full-width:false); }
//       &.tiny   { @include button-size($padding:false, $full-width:false); }

//       &.radius { @include button-style($bg:false, $radius:true); }
//       &.round  { @include button-style($bg:false, $radius:$button-round); }
//     }

//   }

//   // Additional styles for screens larger than 768px
//   @media #{$small} {

//     button, .button {
//       @include button-base($style:false, $display:inline-block);
//       @include button-size($padding:false, $full-width:false);
//     }

//   }

// }



// //
// // Button Group Mixins
// //

// // We use this to add styles for a button group container
// @mixin button-group-container($styles:true, $float:false) {
//   @if $styles {
//     list-style: none;
//     margin: 0;
//     @include clearfix();
//   }
//   @if $float {
//     float: #{$default-float};
//     margin-#{$opposite-direction}: $button-bar-margin-opposite;
//     & div { overflow: hidden; }
//   }
// }

// // We use this to control styles for button groups
// @mixin button-group-style($radius:false, $even:false, $float:$default-float) {

//   // We use this to control the flow, or remove those styles completely.
//   @if $float {
//     margin: 0 0 0 (-$button-border-width);
//     float: $float;
//     // Make sure the first child doesn't get the negative margin.
//     &:first-child { margin-#{$default-float}: 0; }
//   }

//   // We use these to control left and right radius on first/last buttons in the group.
//   @if $radius == true {
//     &:first-child,
//     &:first-child > a,
//     &:first-child > button,
//     &:first-child > .button { @include side-radius($default-float, $button-radius); }
//     &:last-child,
//     &:last-child > a,
//     &:last-child > button,
//     &:last-child > .button { @include side-radius($opposite-direction, $button-radius); }
//   }
//   @else if $radius {
//     &:first-child,
//     &:first-child > a,
//     &:first-child > button,
//     &:first-child > .button { @include side-radius($default-float, $radius); }
//     &:last-child,
//     &:last-child > a,
//     &:last-child > button,
//     &:last-child > .button { @include side-radius($opposite-direction, $radius); }
//   }

//   // We use this to make the buttons even width across their container
//   @if $even {
//     width: percentage((100/$even) / 100);
//     button, .button { width: 100%; }
//   }

// }

// // Only include these CSS classes if $include-html-classes: true
// @if $include-html-button-classes != false {

//   /* Button Groups */
//   .button-group { @include button-group-container;

//     &> * { @include button-group-style(); }

//     &.radius > * { @include button-group-style($radius:$button-radius, $float:null); }
//     &.round > * { @include button-group-style($radius:$button-round, $float:null); }

//     @for $i from 2 through 8 {
//       &.even#{-$i} li { @include button-group-style($even:$i, $float:null); }
//     }
//   }

//   .button-bar {
//     @include clearfix;
//     .button-group { @include button-group-container($styles:false,$float:true); }
//   }

// }



//
// Dropdown Button Mixin
//

// // We use this mixin to build off of the button mixin and add dropdown button styles
// @mixin dropdown-button($padding:medium, $pip-color:#fff, $base-style:true) {

//   // We add in base styles, but they can be negated by setting to 'false'.
//   @if $base-style {
//     position: relative;

//     // This creates the base styles for the triangle pip
//     &:before {
//       position: absolute;
//       content: "";
//       width: 0;
//       height: 0;
//       display: block;
//       border-style: solid;
//       border-color: $dropdown-button-pip-color transparent transparent transparent;
//       top: 50%;
//     }
//   }

//   // If we're dealing with tiny buttons, use these styles
//   @if $padding == tiny {
//     padding-#{$opposite-direction}: $dropdown-button-padding-tny;
//     &:before {
//       border-width: $dropdown-button-pip-size-tny;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-tny;
//       margin-top: $dropdown-button-pip-top-tny;
//     }
//   }

//   // If we're dealing with small buttons, use these styles
//   @if $padding == small {
//     padding-#{$opposite-direction}: $dropdown-button-padding-sml;
//     &:before {
//       border-width: $dropdown-button-pip-size-sml;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-sml;
//       margin-top: $dropdown-button-pip-top-sml;
//     }
//   }

//   // If we're dealing with default (medium) buttons, use these styles
//   @if $padding == medium {
//     padding-#{$opposite-direction}: $dropdown-button-padding-med;
//     &:before {
//       border-width: $dropdown-button-pip-size-med;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-med;
//       margin-top: $dropdown-button-pip-top-med;
//     }
//   }

//   // If we're dealing with large buttons, use these styles
//   @if $padding == large {
//     padding-#{$opposite-direction}: $dropdown-button-padding-lrg;
//     &:before {
//       border-width: $dropdown-button-pip-size-lrg;
//       #{$opposite-direction}: $dropdown-button-pip-opposite-lrg;
//       margin-top: $dropdown-button-pip-top-lrg;
//     }
//   }

//   // We can control the pip color. We didn't use logic in this case, just set it and forget it.
//   @if $pip-color {
//     &:before { border-color: $pip-color transparent transparent transparent; }
//   }
// }


// @if $include-html-button-classes {

//   /* Dropdown Button */
//   .dropdown.button { @include dropdown-button;
//     &.tiny { @include dropdown-button(tiny,$base-style:false); }
//     &.small { @include dropdown-button(small,$base-style:false); }
//     &.large { @include dropdown-button(large,$base-style:false); }
//     &.secondary:before { border-color: $dropdown-button-pip-color-alt transparent transparent transparent; }
//   }

// }


//
// Split Button Mixin
// //

// // We use this mixin to create split buttons that build upon the button mixins
// @mixin split-button($padding:medium, $pip-color:$split-button-pip-color, $span-border:$primary-color, $base-style:true) {

//   // With this, we can control whether or not the base styles come through.
//   @if $base-style {
//     position: relative;

//     // Styling for the split arrow clickable area
//     span {
//       display: block;
//       height: 100%;
//       position: absolute;
//       #{$opposite-direction}: 0;
//       top: 0;
//       border-#{$default-float}: solid 1px;

//       // Building the triangle pip indicator
//       &:before {
//         position: absolute;
//         content: "";
//         width: 0;
//         height: 0;
//         display: block;
//         border-style: inset;

//         #{$default-float}: 50%;
//       }

//       &:active { background-color: $split-button-active-bg-tint; }
//     }
//   }

//   // Control the border color for the span area of the split button
//   @if $span-border {
//     span {
//       border-#{$default-float}-color: darken($span-border, $split-button-function-factor);
//     }
//   }

//   // Style of the button and clickable area for tiny sizes
//   @if $padding == tiny {
//     padding-#{$opposite-direction}: $split-button-padding-tny;

//     span { width: $split-button-span-width-tny;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-tny;
//         top: $split-button-pip-top-tny;
//         margin-#{$default-float}: $split-button-pip-default-float-tny;
//       }
//     }
//   }

//   // Style of the button and clickable area for small sizes
//   @else if $padding == small {
//     padding-#{$opposite-direction}: $split-button-padding-sml;

//     span { width: $split-button-span-width-sml;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-sml;
//         top: $split-button-pip-top-sml;
//         margin-#{$default-float}: $split-button-pip-default-float-sml;
//       }
//     }
//   }

//   // Style of the button and clickable area for default (medium) sizes
//   @else if $padding == medium {
//     padding-#{$opposite-direction}: $split-button-padding-med;

//     span { width: $split-button-span-width-med;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-med;
//         top: $split-button-pip-top-med;
//         margin-#{$default-float}: $split-button-pip-default-float-med;
//       }
//     }
//   }

//   // Style of the button and clickable area for large sizes
//   @else if $padding == large {
//     padding-#{$opposite-direction}: $split-button-padding-lrg;

//     span { width: $split-button-span-width-lrg;
//       &:before {
//         border-top-style: solid;
//         border-width: $split-button-pip-size-lrg;
//         top: $split-button-pip-top-lrg;
//         margin-#{$default-float}: $split-button-pip-default-float-lrg;
//       }
//     }
//   }

//   // Control the color of the triangle pip
//   @if $pip-color {
//     span:before { border-color: $pip-color transparent transparent transparent; }
//   }
// }


// @if $include-html-button-classes != false {

//   /* Split Buttons */
//   .split.button { @include split-button;

//     &.secondary { @include split-button(false, $split-button-pip-color, $secondary-color, false); }
//     &.alert { @include split-button(false, false, $alert-color, false); }
//     &.success { @include split-button(false, false, $success-color, false); }

//     &.tiny { @include split-button(tiny, false, false, false); }
//     &.small { @include split-button(small, false, false, false); }
//     &.large { @include split-button(large, false, false, false); }
//     &.expand { padding-left: 2em; }

//     &.secondary { @include split-button(false, $split-button-pip-color-alt, false, false); }

//     &.radius span { @include side-radius($opposite-direction, $global-radius); }
//     &.round span { @include side-radius($opposite-direction, 1000px); }
//   }

// }
