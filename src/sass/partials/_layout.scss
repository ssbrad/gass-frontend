//|------------------------------------------------------------------------------------------------------------------------------
//| VARIABLES
//|------------------------------------------------------------------------------------------------------------------------------

$experimental: true;

//
// Grid Variables
//
$include-html-grid-classes: $include-html-classes;

$row-width: em-calc(1000);
$column-gutter: em-calc(30);
$total-columns: 12;

//
// @version
//   4.3.0
//
// @title
//   Grid
//
// @description
//   With a default "small-#" grid, a 640-1024px "medium-#" grid, and a 1024+ "large-#" grid, we've got you covered for any layout you can think of.
//

//
// Grid Variables
//
$include-html-grid-classes: true;
$row-width: em-calc(1000);
$column-gutter: em-calc(30);
$total-columns: 12;


//
// Block Grid Variables
//
$include-html-grid-classes: $include-html-classes;

// We use this to control the maximum number of block grid elements per row
$block-grid-elements: 12;
$block-grid-default-spacing: em-calc(20);

// Enables media queries for block-grid classes. Set to false if writing semantic HTML.
$block-grid-media-queries: true;




/*-------------------------------------------------------|  DO NO MOVE  |-------------------------------------------------------*/

@import "foundation/components/global"; // *always required
// @import "foundation/components/grid";
@import "foundation/components/grid-5";
@import "foundation/components/block-grid";

/*-------------------------------------------------------|  DO NO MOVE  |-------------------------------------------------------*/




//|------------------------------------------------------------------------------------------------------------------------------
//| MIXINS
//|------------------------------------------------------------------------------------------------------------------------------


// // We use this to control border radius.
// @mixin radius($radius:$global-radius) {
//   @if $radius {
//     @if $experimental {
//       -webkit-border-radius: $radius;
//     }
//     border-radius: $radius;
//   }
// }

// // We use this to create equal side border radius on elements.
// @mixin side-radius($side, $radius:$global-radius) {
//   @if $side == left {
//     @if $experimental {
//       -moz-border-radius-bottomleft: $radius;
//       -moz-border-radius-topleft: $radius;
//       -webkit-border-bottom-left-radius: $radius;
//       -webkit-border-top-left-radius: $radius;
//     }
//     border-bottom-left-radius: $radius;
//     border-top-left-radius: $radius;
//   }
//   @else if $side == right {
//     @if $experimental {
//       -moz-border-radius-topright: $radius;
//       -moz-border-radius-bottomright: $radius;
//       -webkit-border-top-right-radius: $radius;
//       -webkit-border-bottom-right-radius: $radius;
//     }
//     border-top-right-radius: $radius;
//     border-bottom-right-radius: $radius;
//   }
//   @else if $side == top {
//     @if $experimental {
//       -moz-border-radius-topright: $radius;
//       -moz-border-radius-topleft: $radius;
//       -webkit-border-top-right-radius: $radius;
//       -webkit-border-top-left-radius: $radius;
//     }
//     border-top-right-radius: $radius;
//     border-top-left-radius: $radius;
//   }
//   @else if $side == bottom {
//     @if $experimental {
//       -moz-border-radius-bottomright: $radius;
//       -moz-border-radius-bottomleft: $radius;
//       -webkit-border-bottom-right-radius: $radius;
//       -webkit-border-bottom-left-radius: $radius;
//     }
//     border-bottom-right-radius: $radius;
//     border-bottom-left-radius: $radius;
//   }
// }

// // We can control whether or not we have inset shadows edges.
// @mixin inset-shadow($active:true) {
//   @if $experimental {
//     -webkit-box-shadow: $shiny-edge-size $shiny-edge-color inset;
//   }
//   box-shadow: $shiny-edge-size $shiny-edge-color inset;

//   @if $active { &:active {
//     @if $experimental {
//       -webkit-box-shadow: $shiny-edge-size $shiny-edge-active-color inset;
//     }
//     box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
// }

// // We use this to add transitions to elements
// @mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
//   @if $experimental {
//     -webkit-transition: $property $speed $ease;
//     -moz-transition: $property $speed $ease;
//   }
//   transition: $property $speed $ease;
// }

// // We use this to add box-sizing across browser prefixes
// @mixin box-sizing($type:border-box) {
//   @if $experimental {
//     -moz-box-sizing: $type;
//     -webkit-box-sizing: $type;
//   }
//   box-sizing: $type;
// }

// // We use this to create equilateral triangles
// @mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
//   content: "";
//   display: block;
//   width: 0;
//   height: 0;
//   border: inset $triangle-size;
//   @if ($triangle-direction == top) {
//     border-color: $triangle-color transparent transparent transparent;
//     border-top-style: solid;
//   }
//   @if ($triangle-direction == bottom) {
//     border-color: transparent transparent $triangle-color transparent;
//     border-bottom-style: solid;
//   }
//   @if ($triangle-direction == left) {
//     border-color: transparent transparent transparent $triangle-color;
//     border-left-style: solid;
//   }
//   @if ($triangle-direction == right) {
//     border-color: transparent $triangle-color transparent transparent;
//     border-right-style: solid;
//   }
// }

// // We use this to do clear floats
// @mixin clearfix() {
//   *zoom:1;
//   &:before, &:after { content: " "; display: table; }
//   &:after { clear: both; }
// }


// // We use this to add a glowing effect to block elements
// @mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
//   @if $experimental {
//     -webkit-transition: -webkit-box-shadow $fade-time, border-color $fade-time ease-in-out;
//     -moz-transition: -moz-box-shadow $fade-time, border-color $fade-time ease-in-out;
//   }
//   transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

//   &:#{$selector} {
//     @if $experimental {
//       -webkit-box-shadow: 0 0 5px $glowing-effect-color;
//       -moz-box-shadow: 0 0 5px $glowing-effect-color;
//     }
//     box-shadow: 0 0 5px $glowing-effect-color;
//     border-color: $glowing-effect-color;
//   }
// }

// //
// // Foundation Variables
// //

// // The default font-size is set to 100% of the browser style sheet (usually 16px)
// // for compatibility with brower-based text zoom or user-set defaults.

// // Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// // If you want your base font-size to be different and not have it effect the grid breakpoints,
// // set $em-base to $base-font-size and make sure $base-font-size is a px value.
// $base-font-size: 100%;

// // $base-line-height is 24px while $base-font-size is 16px
// $base-line-height: 150%;

// // This is the default html and body font-size for the base em value.
// $em-base: 16px;

// // It strips the unit of measure and returns it
// @function strip-unit($num) {
//   @return $num / ($num * 0 + 1);
// }

// // New Syntax, allows to optionally calculate on a different base value to counter compounding effect of em's.
// // Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported
// // em-calc(10 20 30px 40);
// // Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
// // em-calc((10, 20, 30, 40px));
// // Optionally call with a different base (eg: 8px) to calculate em.
// // em-calc(16px 32px 48px, 8px);
// // If you require to comma separate your list
// // em-calc((16px, 32px, 48), 8px);

// @function convert-to-em($value, $base-value: $em-base)  {
//   $value: strip-unit($value) / strip-unit($base-value) * 1em;
//   @if ($value == 0em) { $value: 0; } // Turn 0em into 0
//   @return $value;
// }

// @function em-calc($values, $base-value: $em-base) {
//   $max: length($values);

//   @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

//   $emValues: ();
//   @for $i from 1 through $max {
//     $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
//   }
//   @return $emValues;
// }

// // Support for the old syntax

// @function emCalc($values){
//   @return em-calc($values);
// }

// // Maybe you want to create rems with pixels
// // $rem-base: 0.625; //Set the value corresponding to body font size. In this case, you should set as: body {font-size: 62.5%;}
// // @function remCalc($pxWidth) {
// //   @return $pxWidth / $rem-base * 1rem;
// // }

// // We use these to control various global styles
// $body-bg: #fff;
// $body-font-color: #222;
// $body-font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
// $body-font-weight: normal;
// $body-font-style: normal;

// // We use this to control font-smoothing
// $font-smoothing: subpixel-antialiased;

// // We use these to control text direction settings
// $text-direction: ltr;

// // NOTE: No need to change this conditional statement, $text-direction variable controls it all.
// $default-float: left;
// $opposite-direction: right;
// @if $text-direction == ltr {
//   $default-float: left;
//   $opposite-direction: right;
// } @else {
//   $default-float: right;
//   $opposite-direction: left;
// }

// // We use these as default colors throughout
// $primary-color: #2ba6cb;
// $secondary-color: #e9e9e9;
// $alert-color: #c60f13;
// $success-color: #5da423;

// // We use these to make sure border radius matches unless we want it different.
// $global-radius: 3px;
// $global-rounded: 1000px;

// // We use these to control inset shadow shiny edges and depressions.
// $shiny-edge-size: 0 1px 0;
// $shiny-edge-color: rgba(#fff, .5);
// $shiny-edge-active-color: rgba(#000, .2);

// // We use this to control whether or not CSS classes come through in the gem files.
// $include-html-classes: true;
// $include-print-styles: true;
// $include-html-global-classes: $include-html-classes;

// // Media Queries
// $small-screen: 768px;
// $medium-screen: 1280px;
// $large-screen: 1440px;

// $screen: "only screen";
// $small: "only screen and (min-width: #{$small-screen})";
// $medium: "only screen and (min-width:#{$medium-screen})";
// $large: "only screen and (min-width:#{$large-screen})";
// $landscape: "only screen and (orientation: landscape)";
// $portrait: "only screen and (orientation: portrait)";

// // Used to provide media query values for javascript components.
// meta.foundation-mq-small {
//   font-family: $small;
//   width: $small-screen;
// }

// meta.foundation-mq-medium {
//   font-family: $medium;
//   width: $medium-screen;
// }

// meta.foundation-mq-large {
//   font-family: $large;
//   width: $large-screen;
// }

// //We use this as cursors values for enabling the option of having custom cursors in the whole site's stylesheet
// $cursor-crosshair-value: crosshair;
// $cursor-default-value: default;
// $cursor-pointer-value: pointer;
// $cursor-help-value: help;
// $cursor-text-value: text;


// @if $include-html-global-classes {

//   // Set box-sizing globally to handle padding and border widths
//   *,
//   *:before,
//   *:after {
//     @include box-sizing(border-box);
//   }

//   html,
//   body { font-size: $base-font-size; }

//   // Default body styles
//   body {
//     background: $body-bg;
//     color: $body-font-color;
//     padding: 0;
//     margin: 0;
//     font-family: $body-font-family;
//     font-weight: $body-font-weight;
//     font-style: $body-font-style;
//     line-height: 1; // Set to $base-line-height to take on browser default of 150%
//     position: relative;
//     cursor: $cursor-default-value;
//   }

// a:hover { cursor: $cursor-pointer-value; }

//   // Grid Defaults to get images and embeds to work properly
//   img,
//   object,
//   embed { max-width: 100%; height: auto; }

//   object,
//   embed { height: 100%; }
//   img { -ms-interpolation-mode: bicubic; }

//   #map_canvas,
//   .map_canvas {
//     img,
//     embed,
//     object { max-width: none !important;
//     }
//   }

//   // Miscellaneous useful HTML classes
//   .left         { float: left !important; }
//   .right        { float: right !important; }
//   .text-left    { text-align: left !important; }
//   .text-right   { text-align: right !important; }
//   .text-center  { text-align: center !important; }
//   .text-justify { text-align: justify !important; }
//   .hide         { display: none; }

//   // Font smoothing
//   // Antialiased font smoothing works best for light text on a dark background.
//   // Apply to single elements instead of globally to body.
//   // Note this only applies to webkit-based desktop browsers on the Mac.
//   .antialiased { -webkit-font-smoothing: antialiased; }

//   // Get rid of gap under images by making them display: inline-block; by default
//   img {
//     display: inline-block;
//     vertical-align: middle;
//   }

//   //
//   // Global resets for forms
//   //

//   // Make sure textarea takes on height automatically
//   textarea { height: auto; min-height: 50px; }

//   // Make select elements 100% width by default
//   select { width: 100%; }

// }


//
// Grid Function
//

// @function gridCalc($colNumber, $totalColumns) {
//   @return percentage(($colNumber / $totalColumns));
// }

// //
// // Grid Mixins
// //

// // For creating container, nested, and collapsed rows.
// @mixin grid-row($behavior: false) {

//   // use @include grid-row(nest); to include a nested row
//   @if $behavior == nest {
//     width: auto;
//     margin-#{$default-float}: -($column-gutter/2);
//     margin-#{$opposite-direction}: -($column-gutter/2);
//     margin-top: 0;
//     margin-bottom: 0;
//     max-width: none;
//   }

//   // use @include grid-row(collapse); to collapsed a container row margins
//   @else if $behavior == collapse {
//     width: 100%;
//     margin: 0;
//     max-width: $row-width;
//   }

//   // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
//   @else if $behavior == nest-collapse {
//     width: auto;
//     margin: 0;
//     max-width: none;
//   }

//   // use @include grid-row; to use a container row
//   @else {
//     width: 100%;
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     margin-top: 0;
//     margin-bottom: 0;
//     max-width: $row-width;
//   }

//   // Clearfix for all rows
//   @include clearfix();

// }


// // For creating columns - @include these inside a media query to control small vs. large grid layouts
// @mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true) {

//   position: relative;

//   // If collapsed, get rid of gutter padding
//   @if $collapse {
//     padding-left: 0;
//     padding-right: 0;
//   }

//   // Gutter padding whenever a column isn't set to collapse
//   // (use $collapse:null to do nothing)
//   @else if $collapse == false {
//     padding-left: $column-gutter / 2;
//     padding-right: $column-gutter / 2;
//   }

//   // If a column number is given, calculate width
//   @if $columns {
//     width: gridCalc($columns, $total-columns);

//     // If last column, float naturally instead of to the right
//     @if $last-column { float: $opposite-direction; }
//   }

//   // If offset, calculate appropriate margins
//   @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

//   // Source Ordering, adds left/right depending on which you use.
//   @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$opposite-direction}: auto; }
//   @if $pull { #{$opposite-direction}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

//   // If centered, get rid of float and add appropriate margins
//   @if $center {
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     float: none !important;
//   }

//   @if $float {
//     @if $float == left or $float == true { float: $default-float; }
//     @else if $float == right { float: $opposite-direction; }
//     @else { float: none; }
//   }

// }


// @if $include-html-grid-classes != false {
//   /* Grid HTML Classes */
//   .row {
//     @include grid-row;

//     &.collapse {
//        > .column,
//        > .columns { @include grid-column($collapse:true); }

//       .row {margin-left:0; margin-right:0;}
//     }

//     .row { @include grid-row($behavior:nest);
//       &.collapse { @include grid-row($behavior:nest-collapse); }
//     }
//   }

//   .column,
//   .columns { @include grid-column($columns:$total-columns); }

//   @media only screen {

//     .column,
//     .columns { @include grid-column($columns:false); }

//     @for $i from 1 through $total-columns {
//       .small#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//     }

//     @for $i from 0 through $total-columns - 2 {
//       .small-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//     }

//     [class*="column"] + [class*="column"]:last-child { float: $opposite-direction; }
//     [class*="column"] + [class*="column"].end { float: $default-float; }

//     .column.small-centered,
//     .columns.small-centered { @include grid-column($center:true, $collapse:null, $float:false); }
//   }

//   /* Styles for screens that are atleast 768px; */
//   @media #{$small} {

//     @for $i from 1 through $total-columns {
//       .large#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//     }

//     @for $i from 0 through $total-columns - 1 {
//       .row .large-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//     }

//     @for $i from 1 through $total-columns - 1 {
//       .push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
//       .pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
//     }

//     .column.large-centered,
//     .columns.large-centered { @include grid-column($center:true, $collapse:null, $float:false); }

//     .column.large-uncentered,
//     .columns.large-uncentered {
//       margin-#{$default-float}: 0;
//       margin-#{$opposite-direction}: 0;
//       float: $default-float !important;
//     }

//     .column.large-uncentered.opposite,
//     .columns.large-uncentered.opposite {
//       float: $opposite-direction !important;
//     }


//   }

// }



//
// Grid Calc Function
// //
// @function gridCalc($colNumber, $totalColumns) {
//   @return percentage(($colNumber / $totalColumns));
// }

// // Right and Left "auto" for grid
// %right-auto { #{$opposite-direction}: auto; }
// %left-auto { #{$default-float}: auto; }

// //
// // Grid Mixins
// //

// // Create default, nested, and collapsed rows
// @mixin grid-row($behavior: false) {

//   // use @include grid-row(nest); to include a nested row
//   @if $behavior == nest {
//     margin-#{$default-float}: -($column-gutter/2);
//     margin-#{$opposite-direction}: -($column-gutter/2);
//     max-width: none;
//     width: auto;
//   }

//   // use @include grid-row(collapse); to collapsed a container row margins
//   @else if $behavior == collapse {
//     margin-#{$default-float}: 0;
//     margin-#{$opposite-direction}: 0;
//     max-width: $row-width;
//     width: 100%;
//   }

//   // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
//   @else if $behavior == nest-collapse {
//     margin-#{$default-float}: 0;
//     margin-#{$opposite-direction}: 0;
//     max-width: none;
//     width: auto;
//   }

//   // use @include grid-row; to use a container row
//   @else {
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     margin-top: 0;
//     margin-bottom: 0;
//     max-width: $row-width;
//     width: 100%;
//   }

//   @include clearfix;
// }


// // For creating columns - @include these inside a media query to control small vs. large grid layouts
// @mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true, $include-position-relative: false) {

//   // If collapsed, get rid of gutter padding
//   @if $collapse {
//     padding-left: 0;
//     padding-right: 0;
//   }

//   // Gutter padding whenever a column isn't set to collapse
//   // (use $collapse:null to do nothing)
//   @else if $collapse == false {
//     padding-left: $column-gutter / 2;
//     padding-right: $column-gutter / 2;
//   }

//   // If a column number is given, calculate width
//   @if $columns {
//     width: gridCalc($columns, $total-columns);

//     // If last column, float naturally instead of to the right
//     @if $last-column { float: $opposite-direction; }
//   }

//   // If offset, calculate appropriate margins
//   @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

//   // Source Ordering, adds left/right depending on which you use.
//   @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$opposite-direction}: auto; }
//   @if $pull { #{$opposite-direction}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

//   // If centered, get rid of float and add appropriate margins
//   @if $center {
//     margin-#{$default-float}: auto;
//     margin-#{$opposite-direction}: auto;
//     float: none !important;
//   }

//   @if $float {
//     @if $float == left or $float == true { float: $default-float; }
//     @else if $float == right { float: $opposite-direction; }
//     @else { float: none; }
//   }

//   // This helps us not need to repeat "position:relative" everywehere
//   @if $include-position-relative { position: relative; }
// }


// @if $include-html-grid-classes != false {
//   /* Grid HTML Classes */
//   .row {
//     @include grid-row;

//     &.collapse {
//       .column,
//       .columns { @include grid-column($collapse:true); }
//     }

//     .row { @include grid-row($behavior:nest);
//       &.collapse { @include grid-row($behavior:nest-collapse); }
//     }
//   }

//   .column,
//   .columns { @include grid-column($columns:$total-columns, $include-position-relative: true); }

//   @media only screen {

//     @for $i from 1 through $total-columns {
//       .small#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//     }

//     @for $i from 0 through $total-columns - 2 {
//       .small-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//     }

//     [class*="column"] + [class*="column"]:last-child { float: $opposite-direction; }
//     [class*="column"] + [class*="column"].end { float: $default-float; }

//     .column.small-centered,
//     .columns.small-centered { @include grid-column($center:true, $collapse:null, $float:false); }
//   }

//   @media only screen and (min-width: $small-screen) {

//     @for $i from 1 through $total-columns {
//       .medium#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//     }

//     @for $i from 0 through $total-columns - 1 {
//       .medium-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//     }

//     @for $i from 1 through $total-columns - 1 {
//       .medium-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
//       .medium-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
//     }

//     .column.medium-centered,
//     .columns.medium-centered { @include grid-column($center:true, $collapse:null, $float:false); }

//     .column.medium-uncentered,
//     .columns.medium-uncentered {
//       margin-#{$default-float}: 0;
//       margin-#{$opposite-direction}: 0;
//       float: $default-float !important;
//     }

//   }

//   @media only screen and (min-width: $medium-screen) {

//     @for $i from 1 through $total-columns {
//       .large#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
//     }

//     @for $i from 0 through $total-columns - 1 {
//       .large-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
//     }

//     @for $i from 1 through $total-columns - 1 {
//       .large-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
//       .large-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
//     }

//     .column.large-centered,
//     .columns.large-centered { @include grid-column($center:true, $collapse:null, $float:false); }

//     .column.large-uncentered,
//     .columns.large-uncentered {
//       margin-#{$default-float}: 0;
//       margin-#{$opposite-direction}: 0;
//       float: $default-float !important;
//     }

//   }

// }



//
// Block Grid Mixins
//

// We use this mixin to create different block-grids. You can apply per-row and spacing options.
// // Setting $base-style to false will ommit default styles.
// @mixin block-grid($per-row:false, $spacing:$block-grid-default-spacing, $base-style:true) {

//   @if $base-style {
//     display: block;
//     padding: 0;
//     margin: 0 (-$spacing/2);
//     @include clearfix;

//     &>li {
//       display: inline;
//       height: auto;
//       float: $default-float;
//       padding: 0 ($spacing/2) $spacing;
//     }
//   }

//   @if $per-row {
//     &>li {
//       width: 100%/$per-row;
//       padding: 0 ($spacing/2) $spacing;

//       &:nth-of-type(n) { clear: none; }
//       &:nth-of-type(#{$per-row}n+1) { clear: both; }
//     }
//   }

// }

// @if $include-html-grid-classes {
//   /* Foundation Block Grids for below small breakpoint */
//   @media only screen {
//     [class*="block-grid-"] { @include block-grid; }

//     @for $i from 1 through $block-grid-elements {
//       .small-block-grid-#{($i)} {
//         @include block-grid($i,$block-grid-default-spacing,false);
//       }
//     }
//   }

//   /* Foundation Block Grids for above small breakpoint */
//   @media #{$small} {
//     /* Remove small grid clearing */
//     @for $i from 1 through $block-grid-elements {
//       .small-block-grid-#{($i)} > li:nth-of-type(#{$i}n+1) { clear: none; }
//     }
//     @for $i from 1 through $block-grid-elements {
//       .large-block-grid-#{($i)} {
//         @include block-grid($i,$block-grid-default-spacing,false);
//       }
//     }
//   }
// }
